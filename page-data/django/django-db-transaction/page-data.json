{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/django/django-db-transaction/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"effd14f2-b610-5927-b3f6-a05ead41f7f7","excerpt":"0. 서론 어플리케이션 외부의 데이터 혹은 업로드 한 엑셀 데이터를 가공하여 발주서 테이블에 등록하는 기능을 만들었다. 이때 특정 데이터로 패키지를 검색해서 발주서 객체에 추가하는데, 패키지를 검색하지 못해서 예외가 발생할 경우 해당 작업 전체가 취소되어야 한다. django…","html":"<h2>0. 서론</h2>\n<p>어플리케이션 외부의 데이터 혹은 업로드 한 엑셀 데이터를 가공하여 발주서 테이블에 등록하는 기능을 만들었다.<br>\n이때 특정 데이터로 패키지를 검색해서 발주서 객체에 추가하는데, 패키지를 검색하지 못해서 예외가 발생할 경우 해당 작업 전체가 취소되어야 한다.</p>\n<p>django 에 대해 잘 알지 못했기 때문에 트랜잭션은 나중에 적용하기로 하고 일단 하드코딩으로 기능을 구현했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">current_time <span class=\"token operator\">=</span> timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\ncreated_at <span class=\"token operator\">=</span> current_time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d%H%M%S\"</span><span class=\"token punctuation\">)</span>\r\n        \r\n<span class=\"token keyword\">for</span> loop\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\r\n        package <span class=\"token operator\">=</span> Package<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>product_code<span class=\"token operator\">=</span>product_code<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">except</span> Package<span class=\"token punctuation\">.</span>DoesNotExist<span class=\"token punctuation\">:</span>\r\n        <span class=\"token comment\"># 패키지가 없을경우 이번에 넣은 데이터 모두 삭제</span>\r\n        purchase_order_list <span class=\"token operator\">=</span> PurchaseOrder<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>created_at<span class=\"token operator\">=</span>current_time<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span>\r\n        purchase_order_list<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        \r\n        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Package MultipleObjectsReturned'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'product_code'</span><span class=\"token punctuation\">:</span> product_code\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n    purchase_order <span class=\"token operator\">=</span> PurchaseOrder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    purchase_order<span class=\"token punctuation\">.</span>package <span class=\"token operator\">=</span> package\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n    purchase_order<span class=\"token punctuation\">.</span>created_at <span class=\"token operator\">=</span> current_time\r\n    purchase_order<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>패키지가 존재하지 않을경우 현재 작업에서 지금까지 등록된 데이터를 모두 삭제하고 오류가 발생했다고 알려준다.</p>\n<h2>1. 트랜잭션이란?</h2>\n<p>트랜잭션은 데이터 조작을 위한 단위라고 한다.<br>\n쉽게 말해서 한개 이상의 쿼리(DML)가 포함된 쿼리 집합이라고 생각하면 될것 같은데 쿼리와 마찬가지로 commit 이나 rollback 할 수 있다.</p>\n<p>영화관처럼 반드시 결제와 예약이 같이 이뤄져야 할 때, 결제후 예약이 누락되는 문제가 발생해선 안되기 때문에\r\n결제와 예약을 하나의 트랜잭션으로 묶고 commit 과 rollback 을 정하도록 한다.</p>\n<p><a href=\"https://wonit.tistory.com/462\">트랜잭션에 대해서</a></p>\n<h2>2. django 의 트랜잭션</h2>\n<p>데이터베이스 설정을 변경하는것으로 하나의 request 전체를 트랜잭션으로 지정 할 수도 있다. 이후 일부 View 에서는 적용되지 않도록 할 수 있다.<br>\n아니면 아예 처음부터 일부 View 에만 적용되도록 할 수도 있다.</p>\n<h2>3. django 의 쿼리 커밋</h2>\n<p>django 에서는 기본적으로 autocommit 옵션이 true 로 설정되어 자동으로 커밋 된다고 한다.<br>\n‘개발자가 따로 커밋하지 않으니 당연히 자동으로 커밋해주겠지’ 라고 생각할 수 있지만 이번에 트랜잭션에 대해 공부하기 전에는 커밋에 관해 전혀 생각도 하지 못했다.</p>\n<h2>4. 트랜잭션 적용해보기</h2>\n<p>발주서 추가 하는 부분에 <code class=\"language-text\">transaction.atomic()</code> 라는 context manager 를 사용하면 기존처럼 데이터를 추가한 뒤 삭제하지 않아도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Importer</span><span class=\"token punctuation\">:</span>\r\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\t\tself<span class=\"token punctuation\">.</span>request <span class=\"token operator\">=</span> request\r\n\t\tself<span class=\"token punctuation\">.</span>created_at <span class=\"token operator\">=</span> timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\t\tself<span class=\"token punctuation\">.</span>date_string <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>created_at<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d%H%M%S\"</span><span class=\"token punctuation\">)</span>\r\n\r\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">find_package</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\t\tkeyword <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\r\n\t\tmode <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'mode'</span><span class=\"token punctuation\">]</span>\r\n\r\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\r\n\t\t\t<span class=\"token keyword\">if</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'serial_code'</span><span class=\"token punctuation\">:</span>\r\n\t\t\t\tkeyword <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'serial_code'</span><span class=\"token punctuation\">]</span>\r\n\t\t\t\tpackage <span class=\"token operator\">=</span> Package<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>serial_code<span class=\"token operator\">=</span>keyword<span class=\"token punctuation\">)</span>\r\n\t\t\t<span class=\"token keyword\">elif</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'product_code'</span><span class=\"token punctuation\">:</span>\r\n\t\t\t\tkeyword <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'product_code'</span><span class=\"token punctuation\">]</span>\r\n\t\t\t\tpackage <span class=\"token operator\">=</span> Package<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>product_code<span class=\"token operator\">=</span>keyword<span class=\"token punctuation\">)</span>\r\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n\t\t\t\tpackage <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\r\n\t\t<span class=\"token keyword\">except</span> Package<span class=\"token punctuation\">.</span>DoesNotExist<span class=\"token punctuation\">:</span>\r\n\t\t\t<span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">'등록 되지 않은 패키지 입니다('</span> <span class=\"token operator\">+</span> mode<span class=\"token operator\">+</span><span class=\"token string\">': '</span> <span class=\"token operator\">+</span> keyword <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">except</span> Package<span class=\"token punctuation\">.</span>MultipleObjectsReturned<span class=\"token punctuation\">:</span>\r\n\t\t\t<span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">'중복 등록된 패키지 입니다.('</span> <span class=\"token operator\">+</span> mode<span class=\"token operator\">+</span><span class=\"token string\">': '</span> <span class=\"token operator\">+</span> keyword <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\r\n\r\n\t\t<span class=\"token keyword\">return</span> package\r\n\r\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">import_json</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\t\tjson_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\r\n\r\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\r\n\t\t\t<span class=\"token keyword\">with</span> transaction<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\t\t\t\t<span class=\"token keyword\">for</span> purchase_order_object <span class=\"token keyword\">in</span> json_data<span class=\"token punctuation\">[</span><span class=\"token string\">'purchase_order'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n\t\t\t\t\tserial_code <span class=\"token operator\">=</span> purchase_order_object<span class=\"token punctuation\">[</span><span class=\"token string\">'serial_code'</span><span class=\"token punctuation\">]</span>\r\n\r\n\t\t\t\t\tpackage <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find_package<span class=\"token punctuation\">(</span>mode<span class=\"token operator\">=</span><span class=\"token string\">'serial_code'</span><span class=\"token punctuation\">,</span> serial_code<span class=\"token operator\">=</span>serial_code<span class=\"token punctuation\">)</span>\r\n\r\n\t\t\t\t\t<span class=\"token comment\"># 모델 객체에 데이터 저장</span>\r\n\t\t\t\t\tpurchase_order <span class=\"token operator\">=</span> PurchaseOrder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\t\t\t\t\tpurchase_order<span class=\"token punctuation\">.</span>order_number <span class=\"token operator\">=</span> dateformat<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>created_at<span class=\"token punctuation\">,</span> <span class=\"token string\">'Ymd'</span><span class=\"token punctuation\">)</span>\r\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\t\t\t\t\tpurchase_order<span class=\"token punctuation\">.</span>created_at <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>created_at\r\n\r\n\t\t\t\t\t<span class=\"token comment\"># 모델 객체 DB insert</span>\r\n\t\t\t\t\tpurchase_order<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n\t\t\tdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\t\t\t<span class=\"token punctuation\">}</span>\r\n\r\n\t\t<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\r\n\t\t\tdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\t\t\t<span class=\"token punctuation\">}</span>\r\n\r\n\t\t<span class=\"token keyword\">return</span> data</code></pre></div>\n<p><a href=\"https://myjorney.tistory.com/142\">출처1</a>\r\n<a href=\"https://blog.doosikbae.com/146\">출처2</a></p>\n<h2>5. 예외 발생시 처리하기</h2>\n<p><code class=\"language-text\">try</code> 블록이 <code class=\"language-text\">transaction.atomic()</code> 블록을 감싸도록 한 후 예외를 처리하면 된다.</p>\n<p><a href=\"https://lee-seul.github.io/django/2019/02/02/django-transactionmanagementerror.html\">출처</a></p>","frontmatter":{"title":"django 에서 트랜잭션 적용하기","date":"April 20, 2022","description":null}},"previous":{"fields":{"slug":"/django/tht-django-pandas-i-know/"},"frontmatter":{"title":"내가 사용해본 django-pandas"}},"next":{"fields":{"slug":"/django/rename-column-name/"},"frontmatter":{"title":"django orm 에서 column name 변경하여 리턴하기"}}},"pageContext":{"id":"effd14f2-b610-5927-b3f6-a05ead41f7f7","previousPostId":"47f88826-f242-5ddb-8765-6125a4f794ae","nextPostId":"b74a755f-9e39-5309-9e9a-93d337fadea0"}},
    "staticQueryHashes": ["2841359383","3257411868"]}