{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/django/many-to-many-relationships-custom-field/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"c4669c95-f4df-594c-b4cf-0c0e826cfa65","excerpt":"0. 서론 기본적으로 다대다 관계에서는 새로운 테이블이 생성된다. 그리고 column 으로는 관계를 맺게 되는 row 들의 pk 를 저장하게 된다. 아래의 표는 내가 프로젝트를 진행하며 생성된 다대다 관계 테이블이다. id package_id product_id 1 1 1 2 2 1…","html":"<h2>0. 서론</h2>\n<p>기본적으로 다대다 관계에서는 새로운 테이블이 생성된다.<br>\n그리고 column 으로는 관계를 맺게 되는 row 들의 pk 를 저장하게 된다.</p>\n<p>아래의 표는 내가 프로젝트를 진행하며 생성된 다대다 관계 테이블이다.</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>package_id</th>\n<th>product_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>이 상황에서 나는 다대다 관계 별 수량을 같이 저장해야 할 필요성을 느꼈다.</p>\n<h2>1. 사용방법</h2>\n<p>나의 경우에는 package/product, package/supplement 이렇게 두개의 다대다 관계를 생성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 패키지 모델</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Package</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    description <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    serial_code <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    product_code <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    is_split <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    memo <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    business <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Business<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>PROTECT<span class=\"token punctuation\">)</span>\r\n    product <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>Product<span class=\"token punctuation\">)</span>\r\n    supplement <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>Supplement<span class=\"token punctuation\">)</span>\r\n    \r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n        verbose_name <span class=\"token operator\">=</span> <span class=\"token string\">'패키지'</span></code></pre></div>\n<p>마이그레이션이 완료되어 테이블이 생성된 상황에서 다음과 같이 변경했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 패키지 모델 변경사항\r\n    ...\r\n    product = models.ManyToManyField(Product, through='PackageProduct')\r\n    supplement = models.ManyToManyField(Supplement, through='PackageSupplement')\r\n    ...\r\n\r\n# 패키지_상품\r\nclass PackageProduct(models.Model):\r\n    package = models.ForeignKey(Package, on_delete=models.PROTECT)\r\n    product = models.ForeignKey(Product, on_delete=models.PROTECT)\r\n    quantity = models.SmallIntegerField()\r\n    \r\n    class Meta:\r\n        db_table = 'inventory_package_product'\r\n\r\n\r\n# 패키지_부자재\r\nclass PackageSupplement(models.Model):\r\n    package = models.ForeignKey(Package, on_delete=models.PROTECT)\r\n    supplement = models.ForeignKey(Supplement, on_delete=models.PROTECT)\r\n    quantity = models.SmallIntegerField()\r\n    \r\n    class Meta:\r\n        db_table = 'inventory_package_supplement'</code></pre></div>\n<p><a href=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.ManyToManyField.through\">출처1</a>\r\n<a href=\"https://lee-seul.github.io/django/2019/02/21/django-extend-manytomanyfield.html\">출처2</a></p>","frontmatter":{"title":"django model 의 다대다 관계에서 필드 추가하기","date":"March 30, 2022","description":null},"fields":{"category":"django","slug":"/django/many-to-many-relationships-custom-field/"}},"previous":{"fields":{"slug":"/django-rest-framework/the-serializer-i-know/"},"frontmatter":{"title":"Serializer 에 대하여"}},"next":{"fields":{"slug":"/vue-js/pass-data-to-modal/"},"frontmatter":{"title":"모달에 데이터 전달하기"}}},"pageContext":{"id":"c4669c95-f4df-594c-b4cf-0c0e826cfa65","previousPostId":"8e0e8f52-948d-5d47-a241-05185b775467","nextPostId":"edc231b4-a8b4-5f98-a671-02c9056dce56"}},
    "staticQueryHashes": ["230163734","2841359383","3496359572"]}