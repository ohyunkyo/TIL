{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/front-end/axios-modularization/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"fd1cf6b8-205b-55e4-9337-1c4387fe3ef7","excerpt":"0. 서론 코드의 재사용성을 높이기 위해 현재 뷰 컴포넌트에서 각자 axios 객체를 생성하고 요청하던것을 모듈화 하기로 했다., 1. 모듈화의 장점 쉽고 효율적이다. 간단하면서도 강력한 장점이다. 사용할 API 가 많아지면 많아질수록 더욱 효율적으로 사용 가능하고 관리하기도 쉽다.…","html":"<h2>0. 서론</h2>\n<p>코드의 재사용성을 높이기 위해 현재 뷰 컴포넌트에서 각자 axios 객체를 생성하고 요청하던것을 모듈화 하기로 했다.,</p>\n<h2>1. 모듈화의 장점</h2>\n<p>쉽고 효율적이다.</p>\n<p>간단하면서도 강력한 장점이다. 사용할 API 가 많아지면 많아질수록 더욱 효율적으로 사용 가능하고 관리하기도 쉽다.</p>\n<h2>2. 모듈화 하기</h2>\n<p>우선 axios 인스턴스를 생성하여 리턴하는 파일을 만들어준다.<br>\n<code class=\"language-text\">.env</code> 파일에 정의된 URL 을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"># src<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js\r\n\r\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_API_URL</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번엔 인스턴스를 활용해 실제로 요청을 보내는 함수를 생성한다.<br>\n위에서 만든 인스턴스를 <code class=\"language-text\">import</code> 하고 <code class=\"language-text\">get</code> 메서드를 사용해 요청을 보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"># src<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>inventory<span class=\"token punctuation\">.</span>js\r\n\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>instance<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span>\r\n\r\n<span class=\"token comment\">// 품목별 재고 가져오기</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">fetchInventoryBusiness</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">business_id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token string\">'api/inventory/business/'</span> <span class=\"token operator\">+</span> business_id\r\n    <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 월별 재고 가져오기</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">fetchInventoryMonthly</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product_id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token string\">'api/inventory/monthly/'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'monthly'</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">model_pk</span><span class=\"token operator\">:</span> product_id\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\r\n    fetchInventoryBusiness<span class=\"token punctuation\">,</span>\r\n    fetchInventoryMonthly\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실제로 뷰 컴포넌트에서 사용하는 부분이다.<br>\n<code class=\"language-text\">then, catch</code> 를 <code class=\"language-text\">inventory.js</code> 에서 해줘도 되겠지만 각 컴포넌트에서 정의해주는 편이 더 활용하기 편하다고 생각했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\"># src/views/business/Business.vue\r\n\r\n...\r\n&lt;script&gt;\r\nimport {getInventoryBusiness} from &#39;/src/api/inventory&#39;\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      inventory_business: []\r\n    }\r\n  },\r\n  mounted() {\r\n    const result = getInventoryBusiness(this.$route.query.pk)\r\n    result.then(response =&gt; {\r\n      this.inventory_business = response.data\r\n    }).catch(err =&gt; {\r\n      console.log(&quot;에러 발생&quot;, err)\r\n    });\r\n  }\r\n}\r\n&lt;/script&gt;\r\n...\r\n</code></pre></div>\n<p><a href=\"https://heewon26.tistory.com/158\">출처1</a>\r\n<a href=\"https://yamoo9.github.io/axios/guide/\">출처2</a>\r\n<a href=\"https://greedysiru.tistory.com/804\">출처3</a>\r\n<a href=\"https://dev-jsk.tistory.com/109\">출처4</a>\r\n<a href=\"https://veneas.tistory.com/entry/axiosjs-GET-POST-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EC%84%9C%EB%B2%84%EC%99%80-%ED%86%B5%EC%8B%A0%ED%95%98%EA%B8%B0\">출처5</a></p>","frontmatter":{"title":"axios 모듈화 하기","date":"April 22, 2022","description":null}},"previous":{"fields":{"slug":"/front-end/env-file/"},"frontmatter":{"title":"env 파일 사용하기"}},"next":{"fields":{"slug":"/front-end/file-download-from-response/"},"frontmatter":{"title":"http response 의 파일을 다운로드 하기"}}},"pageContext":{"id":"fd1cf6b8-205b-55e4-9337-1c4387fe3ef7","previousPostId":"292f17ba-73f2-57e7-9599-489a3adbb50a","nextPostId":"46a687f7-47fb-5617-bc4a-66717b23756f"}},
    "staticQueryHashes": ["2841359383","3257411868"]}