{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/django-rest-framework/django-filter/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"6f5ee300-3ef5-5485-bd52-b41b62aa6527","excerpt":"0. 서론 API 엔드포인트에 쿼리스트링을 추가하여 필터링 된 데이터를 가져오고 싶어서 찾아보게 되었다. django-rest-framework 공식 사이트 를 참고했다 1. 설치 후 설정하기 가장먼저 해당 라이브러리를 설치해야 한다 그 다음 django…","html":"<h2>0. 서론</h2>\n<p>API 엔드포인트에 쿼리스트링을 추가하여 필터링 된 데이터를 가져오고 싶어서 찾아보게 되었다.<br>\n<a href=\"https://www.django-rest-framework.org/api-guide/filtering/#api-guide\">django-rest-framework 공식 사이트</a> 를 참고했다</p>\n<h2>1. 설치 후 설정하기</h2>\n<p>가장먼저 해당 라이브러리를 설치해야 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> django-filter</code></pre></div>\n<p>그 다음 django 에 사용할 수 있도록 설정한다. <code class=\"language-text\">settings.py</code> 파일의 적절한 위치에 아래 설정들을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token string\">'django_filters'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">REST_FRAMEWORK <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token string\">'DEFAULT_FILTER_BACKENDS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'django_filters.rest_framework.DjangoFilterBackend'</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>2. 적용하기</h2>\n<p>설치와 설정이 끝났다면 ViewSet 클래스에 <code class=\"language-text\">filter_backends</code> 와 <code class=\"language-text\">filterset_fields</code> 를 추가하여 아주 쉽게 적용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># views.py</span>\r\n\r\n<span class=\"token keyword\">from</span> django_filters<span class=\"token punctuation\">.</span>rest_framework <span class=\"token keyword\">import</span> DjangoFilterBackend\r\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>viewsets <span class=\"token keyword\">import</span> ModelViewSet\r\n\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Product\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> ProductSerializer\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductModelViewSet</span><span class=\"token punctuation\">(</span>ModelViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    queryset <span class=\"token operator\">=</span> Product<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    serializer_class <span class=\"token operator\">=</span> ProductSerializer\r\n    filter_backends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>DjangoFilterBackend<span class=\"token punctuation\">]</span>\r\n    filterset_fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'business'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>사용할 때에는 <code class=\"language-text\">filterset_fields</code> 에 포함된 컬럼을 쿼리스트링으로 사용하여 다음과 같이 요청하면 된다.<br>\n<code class=\"language-text\">http://localhost:8000/api/product/?business=1&amp;name=샘플</code></p>\n<h2>3. 키워드를 포함하는 값 검색하기</h2>\n<p>하지만 위와 같이 사용하면 키워드와 정확히 일치하는 데이터만을 반환한다.<br>\ndjango ORM 의 <code class=\"language-text\">model.objects.filter=name__icontains='샘플'</code> 과 같은 결과를 받고싶다면 다음과 같이 하면 된다.</p>\n<p>먼저 커스텀 필터를 추가해야 한다.<br>\n따로 파일을 추가하는것이 관리하기 편할것 같아서 프로젝트 파일 안에 <code class=\"language-text\">filter.py</code> 파일을 추가하고 필터를 생성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># filters.py</span>\r\n\r\n<span class=\"token keyword\">import</span> django_filters\r\n<span class=\"token keyword\">from</span> django_filters <span class=\"token keyword\">import</span> FilterSet\r\n\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Product\r\n\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductFilter</span><span class=\"token punctuation\">(</span>FilterSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    name <span class=\"token operator\">=</span> django_filters<span class=\"token punctuation\">.</span>CharFilter<span class=\"token punctuation\">(</span>lookup_expr<span class=\"token operator\">=</span><span class=\"token string\">'icontains'</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n        model <span class=\"token operator\">=</span> Product\r\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'business'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">Meta</code> 클래스의 <code class=\"language-text\">fields</code> 에는 정의했지만 <code class=\"language-text\">ProductFilter</code> 클래스에선 정의하지 않은 컬럼(business)의 경우 기존과 동일하게 정확히 일치하는 데이터를 가져온다.</p>\n<p>이제 <code class=\"language-text\">filterset_fields</code> 를 <code class=\"language-text\">filterset_class</code> 로 변경 후 생성한 필터 클래스를 참조하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># views.py</span>\r\n\r\n<span class=\"token keyword\">from</span> django_filters<span class=\"token punctuation\">.</span>rest_framework <span class=\"token keyword\">import</span> DjangoFilterBackend\r\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>viewsets <span class=\"token keyword\">import</span> ModelViewSet\r\n\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>filters <span class=\"token keyword\">import</span> ProductFilter\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Product\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> ProductSerializer\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductModelViewSet</span><span class=\"token punctuation\">(</span>ModelViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    queryset <span class=\"token operator\">=</span> Product<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    serializer_class <span class=\"token operator\">=</span> ProductSerializer\r\n    filter_backends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>DjangoFilterBackend<span class=\"token punctuation\">]</span>\r\n    filterset_class <span class=\"token operator\">=</span> ProductFilter</code></pre></div>\n<p><a href=\"https://stackoverflow.com/questions/65158059/django-filters-icontains-type-of-lookup-expression-doesnt-work-properly\">출처</a></p>\n<h2>99. 끝나고 나서</h2>\n<p><code class=\"language-text\">serializer</code>, <code class=\"language-text\">filter_backends</code>, <code class=\"language-text\">filterset_class</code> 등 <code class=\"language-text\">ModelViewSet</code> 의 파라미터들이 어떻게 작동하는지 정확히 알지 못하고 사용중이다.<br>\n일단 front/back 분리가 완료되면 부족했던점에 대해 알아봐야 할것같다.</p>","frontmatter":{"title":"django-filter 라이브러리 사용법","date":"March 23, 2022","description":null},"fields":{"category":"django-rest-framework","slug":"/django-rest-framework/django-filter/"}},"previous":{"fields":{"slug":"/mac-os/shortcuts/"},"frontmatter":{"title":"맥북 단축키"}},"next":{"fields":{"slug":"/software-development-plan/user-guide/"},"frontmatter":{"title":"사용자 가이드 만들기"}}},"pageContext":{"id":"6f5ee300-3ef5-5485-bd52-b41b62aa6527","previousPostId":"f9774506-0ac7-5c6a-b113-7874dcffa0d0","nextPostId":"f16118d8-706d-533c-acae-484d36a5fc54"}},
    "staticQueryHashes": ["230163734","2841359383","3496359572"]}