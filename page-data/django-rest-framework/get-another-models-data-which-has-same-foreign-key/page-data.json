{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/django-rest-framework/get-another-models-data-which-has-same-foreign-key/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"10416c56-182a-55b5-8c24-74032c67dd68","excerpt":"0. 서론 다음과 같은 구조에서  가 해당 Product 인스턴스와 같은 Business 모델을 Foreign Key 로 가지는 Package 를 가져오고 싶었다. 1. SerializerMethodField 사용하여 가져오기 처음엔 필터가 적용된 PackageSerializer…","html":"<h2>0. 서론</h2>\n<p>다음과 같은 구조에서 <code class=\"language-text\">ProductDetailSerializer</code> 가 해당 Product 인스턴스와 같은 Business 모델을 Foreign Key 로 가지는 Package 를 가져오고 싶었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 품목 정의</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Business</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    description <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    \r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n        verbose_name <span class=\"token operator\">=</span> <span class=\"token string\">'품목 정의'</span>\r\n    \r\n    \r\n<span class=\"token comment\"># 상품 정의</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    description <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    business <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Business<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>PROTECT<span class=\"token punctuation\">)</span>\r\n    maximum_quantity <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SmallIntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    \r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n        verbose_name <span class=\"token operator\">=</span> <span class=\"token string\">'상품 정의'</span>\r\n    \r\n    \r\n<span class=\"token comment\"># 부자재</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n생략\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n    \r\n    \r\n<span class=\"token comment\"># 패키지</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Package</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    description <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    serial_code <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    product_code <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    is_split <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    memo <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    business <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Business<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>PROTECT<span class=\"token punctuation\">)</span>\r\n    product <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>Product<span class=\"token punctuation\">,</span> through<span class=\"token operator\">=</span><span class=\"token string\">'PackageProduct'</span><span class=\"token punctuation\">)</span>\r\n    supplement <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>Supplement<span class=\"token punctuation\">,</span> through<span class=\"token operator\">=</span><span class=\"token string\">'PackageSupplement'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>1. SerializerMethodField 사용하여 가져오기</h2>\n<p>처음엔 필터가 적용된 PackageSerializer 를 사용해야 한다고 생각했다.<br>\n그래서 아래처럼 <code class=\"language-text\">SerializerMethodField()</code> 에 필터링된 쿼리셋을 리턴하는 방법으로 구현했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductDetailSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    business_id <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>ReadOnlyField<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'business.id'</span><span class=\"token punctuation\">)</span>\r\n    business_name <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>ReadOnlyField<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'business.name'</span><span class=\"token punctuation\">)</span>\r\n    package_product_list <span class=\"token operator\">=</span> PackageProductSerializer<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'packageproduct_set'</span><span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    package_list <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>SerializerMethodField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    \r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n        model <span class=\"token operator\">=</span> Product\r\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maximum_quantity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'business_id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'business_name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'package_product_list'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'package_list'</span><span class=\"token punctuation\">]</span>\r\n    \r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_package_list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        qs <span class=\"token operator\">=</span> Package<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>business_id<span class=\"token operator\">=</span>product<span class=\"token punctuation\">.</span>business<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\r\n        serializer <span class=\"token operator\">=</span> PackageSerializer<span class=\"token punctuation\">(</span>instance<span class=\"token operator\">=</span>qs<span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> serializer<span class=\"token punctuation\">.</span>data</code></pre></div>\n<p><a href=\"https://stackoverflow.com/questions/28309507/django-rest-framework-filtering-for-serializer-field\">출처</a></p>\n<h2>2. SerializerMethodField 사용하지 않기</h2>\n<p>이후 TIL 에 ‘다대다 관계 모델 직렬화(serialize) 하기’ 라는 글을 쓰기 위해 공부하던 중 더 낫다고 생각되는 방법을 찾아서 수정했다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductDetailSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    business_id <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>ReadOnlyField<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'business.id'</span><span class=\"token punctuation\">)</span>\r\n    business_name <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>ReadOnlyField<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'business.name'</span><span class=\"token punctuation\">)</span>\r\n    package_product_list <span class=\"token operator\">=</span> PackageProductSerializer<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'packageproduct_set'</span><span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    package_list <span class=\"token operator\">=</span> PackageSerializer<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'business.package_set'</span><span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    \r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n        model <span class=\"token operator\">=</span> Product\r\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maximum_quantity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'business_id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'business_name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'package_product_list'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'package_list'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>이렇게 하면 기존 방법과 같은 기능을 하지만 더욱 간결하고 가독성도 좋아진 소스라고 생각한다.</p>\n<h2>99. 끝나고 나서</h2>\n<p>내가 원했던것이 무엇인지 직관적으로 볼 수 있도록 각 마크다운 파일들을 수정해야 할것같다.<br>\n‘대충 이런 형태의 데이터를 원한다’ 라는 생각으로는 질문을 하기도 힘들고 성공적으로 구현했다고 하더라도 정리하는데 힘들고 오래걸리기 때문.</p>","frontmatter":{"title":"foreign key 가 동일한 다른 모델의 데이터 가져오기","date":"March 31, 2022","description":null},"fields":{"category":"django-rest-framework","slug":"/django-rest-framework/get-another-models-data-which-has-same-foreign-key/"}},"previous":{"fields":{"slug":"/django-rest-framework/serialize-many-to-many-relationships/"},"frontmatter":{"title":"다대다 관계 모델 직렬화(serialize) 하기"}},"next":{"fields":{"slug":"/vue-js/pass-data-to-modal/"},"frontmatter":{"title":"모달에 데이터 전달하기"}}},"pageContext":{"id":"10416c56-182a-55b5-8c24-74032c67dd68","previousPostId":"7d78947b-1b02-540f-9a67-faa8528ff575","nextPostId":"edc231b4-a8b4-5f98-a671-02c9056dce56"}},
    "staticQueryHashes": ["230163734","2841359383","3496359572"]}