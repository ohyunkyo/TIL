{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/django-rest-framework/json-to-dataframe/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"2a7bb4a7-c3cb-5c9d-abc9-d6695ae88505","excerpt":"0. 서론 모델의 데이터를 가공하여 엑셀 파일을 리턴하는 기능을 만들어 사용중이였다. 원하는대로 작동하긴 했지만 가독성도 떨어지고 복잡한 소스코드를 계속 사용할 생각은 없었다. 그래서 drf…","html":"<h2>0. 서론</h2>\n<p>모델의 데이터를 가공하여 엑셀 파일을 리턴하는 기능을 만들어 사용중이였다.<br>\n원하는대로 작동하긴 했지만 가독성도 떨어지고 복잡한 소스코드를 계속 사용할 생각은 없었다.<br>\n그래서 drf 로 리팩토링 하는 과정에서 다른 방법을 사용하여 더 좋은 소스코드를 작성하고자 했다.</p>\n<p>엑셀파일을 어디에서 생성할것인지가 첫번째 고민이였다.<br>\nvue.js 에서 json 데이터로 엑셀 파일을 생성하는 라이브러리가 있다는것을 알게됐기 때문인데,<br>\n관련 지식이나 경험이 없어서 친구의 조언대로 기존 방식(백엔드에서 생성 후 전달)을 사용하기로 했다.</p>\n<p>엑셀파일을 생성할 때에는 하드코딩에 가까운 기존 방식보다는 pandas 라이브러리를 사용하는것이 더 적합하다고 생각했다.<br>\n간단한 메서드로 엑셀파일을 생성 할 수 있는것처럼 보였고, dataframe 형식을 배워두면 유용하게 사용할 수 있을것 같았다.</p>\n<h2>1. 기본 예제 실습하기</h2>\n<p>pandas 예제에서는 queryset 으로 쉽게 dataframe 을 생성했다.<br>\n그래서 비슷한 방식으로 <code class=\"language-text\">serializer.data</code> 를 넘기면 똑같이 dataframe 이 생성될것이라 기대했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 처음 실습한 기본 예제</span>\r\n\r\n<span class=\"token keyword\">from</span> django_pandas<span class=\"token punctuation\">.</span>io <span class=\"token keyword\">import</span> read_frame\r\n\r\nqs <span class=\"token operator\">=</span> PurchaseOrder<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\ndf <span class=\"token operator\">=</span> read_frame<span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># serializer 를 사용하기위해 변형한 예제</span>\r\n\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\nqs <span class=\"token operator\">=</span> PurchaseOrder<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nserializer <span class=\"token operator\">=</span> PurchaseOrderSerializer<span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">)</span>\r\ndf <span class=\"token operator\">=</span> read_frame<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">)</span></code></pre></div>\n<p>그러나 당연히 실패했다.<br>\n<code class=\"language-text\">read_frame</code> 은 쿼리셋을 dataframe 으로 변환하는 메서드이기 때문이다.</p>\n<h2>2. 구글링하기</h2>\n<p>당연히 serializer 를 dataframe 으로 바꿀 수 있는 방법이 있을것이라 생각했다.<br>\n하지만 그중에 django-rest-pandas 는 업데이트된지도 너무 오래됐고 다른곳에서 활용하기 힘들것 같아서 제외하고 다른 방법을 찾아봤다.</p>\n<p>serializer to dataframe 같은 검색어로 시간을 허비하던 중 serializer 가 JSON 데이터를 리턴한다는 사실이 떠올랐다.</p>\n<h2>3. json 데이터를 dataframe 으로 변환하기</h2>\n<p><code class=\"language-text\">json_normalize()</code> 메서드를 사용하여 json 데이터를 dataframe 으로 변환 할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># purchase_order_api.py</span>\r\n\r\n<span class=\"token keyword\">from</span> pandas<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>json <span class=\"token keyword\">import</span> json_normalize\r\n\r\nqueryset <span class=\"token operator\">=</span> PurchaseOrder<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>created_at__icontains<span class=\"token operator\">=</span>created_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">)</span>\r\nserializer <span class=\"token operator\">=</span> PurchaseOrderDownloadSerializer<span class=\"token punctuation\">(</span>queryset<span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\ndf <span class=\"token operator\">=</span> json_normalize<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://www.delftstack.com/ko/howto/python-pandas/json-to-pandas-dataframe/\">출처</a></p>","frontmatter":{"title":"json 데이터를 dataframe 으로 변환하기","date":"April 12, 2022","description":null}},"previous":{"fields":{"slug":"/vue-js/axios-send-form/"},"frontmatter":{"title":"axios 에서 form 전송하기"}},"next":{"fields":{"slug":"/django-rest-framework/create-xls-file-and-return-it/"},"frontmatter":{"title":"엑셀 파일 HttpResponse 에 담아 전달하기"}}},"pageContext":{"id":"2a7bb4a7-c3cb-5c9d-abc9-d6695ae88505","previousPostId":"a79e311e-ded9-5db9-91c9-a2c91e2984d9","nextPostId":"167c3a17-c621-5fbb-ad14-8e71837c309f"}},
    "staticQueryHashes": ["2841359383","3257411868"]}