{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/django-rest-framework/start-with-drf/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"adf2fe42-fa29-5cff-8580-86fa86c161bf","excerpt":"0. 서론 장고 프로젝트를 생성하는것부터 간단한 API 를 만드는 과정을 정리한다.…","html":"<h2>0. 서론</h2>\n<p>장고 프로젝트를 생성하는것부터 간단한 API 를 만드는 과정을 정리한다.</p>\n<h2>1. 장고 프로젝트 생성</h2>\n<p>내가 원하는 구조를 위해 프로젝트의 <code class=\"language-text\">root</code> 로 사용될 디렉토리를 먼저 생성하고 그 안에서 프로젝트를 생성 하는 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> ingredient-manage\r\n$ <span class=\"token builtin class-name\">cd</span> ingredient-manage \r\n$ django-admin startproject config <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>이렇게 하고 나면 다음과 같은 구조의 디렉토리와 파일을 볼 수 있는데,  이후 <code class=\"language-text\">ingredient-manage</code> 디렉토리에 <code class=\"language-text\">app</code> 을 추가하는 방식으로 개발을 진행할것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ingredient-manage\r\n├── config\r\n    ├── __init__.py\r\n    ├── asgi.py\r\n    ├── settings.py\r\n    ├── urls.py\r\n    ├── wsgi.py\r\n├── manage.py</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">django-admin startproject</code> 명령어로 생성한 프로젝트에는 기본적인 설정 파일 이외엔 넣지 않을 예정이기 때문에 앞으로 장고 프로젝트를 생성할 때에는 <code class=\"language-text\">config</code> 라는 이름의 프로젝트를 생성하기로 했다.</p>\n</blockquote>\n<h2>2. IDE 설정</h2>\n<p>각 IDE 에서 파이썬 인터프리터 및 테스트 환경을 설정해준다.</p>\n<p><a href=\"/TIL/IDE/the-pycharm-i-know/\">Pycharm 설정 방법</a></p>\n<p>이후 테스트 서버가 실행되는지 확인한다.</p>\n<h2>3. django-rest-framework 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">cd</span> ingredient-manage\r\n$ pip <span class=\"token function\">install</span> djangorestframework\r\n$ pip <span class=\"token function\">install</span> django-filter </code></pre></div>\n<h2>4. app 생성하기</h2>\n<p>다음으로 app 을 하나 생성한다.<br>\n각 기능별로 app 을 분리하여 재사용 할 수도 있지만 지금 단계에서는 하나의 app 에 모든 기능을 만들 예정이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ django-admin startapp management</code></pre></div>\n<h2>4. settings.py 파일 설정하기</h2>\n<h3>4.1 INSTALLED_APPS</h3>\n<p>drf 와 방금 생성한 app 을 사용하기 위해선 <code class=\"language-text\">INSTALLED_APPS</code> 에 drf 와 새로 생성한 app 을 추가해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n    <span class=\"token string\">'rest_framework'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">'django_filters'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">'management.apps.ManagementConfig'</span></code></pre></div>\n<h3>4.2 Internationalization</h3>\n<p>다음으론 i18n 설정을 다음과 같이변경한다. 언어 코드와 타임존을 변경했고, DB 에 한국 시간(<code class=\"language-text\">KST</code>)을 저장하기 위해 <code class=\"language-text\">USE_TZ</code> 를 <code class=\"language-text\">False</code> 로 변경했다. 만약 <code class=\"language-text\">True</code> 상태라면 <code class=\"language-text\">UTC</code> 시간이 저장된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">LANGUAGE_CODE <span class=\"token operator\">=</span> <span class=\"token string\">'ko-kr'</span>\r\n\r\nTIME_ZONE <span class=\"token operator\">=</span> <span class=\"token string\">'Asia/Seoul'</span>\r\n\r\nUSE_I18N <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n\r\nUSE_L10N <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n\r\nUSE_TZ <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></code></pre></div>\n<h3>4.3 secret 파일</h3>\n<p>나는 이번 장고 프로젝트를 github 의 public repository 에 업로드 할 예정이다.<br>\n그런데 프로젝트 내부엔 공개할 수 없는 패스워드나 키가 포함되어있기 때문에 그대로 업로드 할수는 없다.<br>\n대신 이것들을 별도로 다른 파일에 보관하고 <code class=\"language-text\">settings.py</code> 에서 그 파일을 불러오도록 할 것이다.</p>\n<p>먼저 <code class=\"language-text\">django-secret.json</code> 이라는 파일을 프로젝트 루트 디렉토리(<code class=\"language-text\">ingredient-manage</code>)에 생성한다. 그 다음 공개하지 않고 싶은 패스워드나 키를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">\r\n<span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"DJANGO_SECRET_KEY\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"DB_DEFAULT_ENGINE\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"DB_DEFAULT_NAME\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"DB_DEFAULT_USER\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"DB_DEFAULT_PASSWORD\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"DB_DEFAULT_HOST\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"DB_DEFAULT_PORT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"PROD_ALLOWED_HOSTS\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그다음으론 이 파일을 읽은 뒤 적절한 위치에 적절히 호출하면 된다.<br>\n나는 <code class=\"language-text\">settings.py</code> 파일의 <code class=\"language-text\">BASE_DIR</code> 변수 아래에서 <code class=\"language-text\">django-secret.json</code> 파일을 불러왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\r\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\r\n\r\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ImproperlyConfigured\r\n\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\r\nBASE_DIR <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent\r\n\r\n\r\n<span class=\"token comment\"># Quick-start development settings - unsuitable for production</span>\r\n<span class=\"token comment\"># See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/</span>\r\n\r\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./django-secret.json'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\r\n    django_secret <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_secret</span><span class=\"token punctuation\">(</span>setting<span class=\"token punctuation\">,</span> secrets<span class=\"token operator\">=</span>django_secret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> secrets<span class=\"token punctuation\">[</span>setting<span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\r\n        error_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Set the {0} enviroment varialble\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>setting<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">raise</span> ImproperlyConfigured<span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">)</span>\r\n        \r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>그리고 아래처럼 호출했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\r\nSECRET_KEY <span class=\"token operator\">=</span> get_secret<span class=\"token punctuation\">(</span><span class=\"token string\">\"DJANGO_SECRET_KEY\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">SECRET_KEY</code> 뿐 아니라 DB 정보도 같은 방식으로 호출하면 중요한 정보를 노출하지 않을 수 있다.</p>\n<h3>4.4 local, prod</h3>\n<!--\r\n개발, 운영 디비 `DEBUG = True` 같은 설정\r\n-->\n<h2>References</h2>\n<p><a href=\"https://docs.djangoproject.com/ko/4.0/intro/tutorial01/\">django 튜토리얼</a><br>\n<a href=\"https://forum.djangoproject.com/t/project-naming-conventions/339/12\">프로젝트 이름을 config 로 사용한 이유</a></p>","frontmatter":{"title":"drf 사용하여 API 만들기","date":"July 22, 2022","description":null}},"previous":{"fields":{"slug":"/tmp/custom-user-model/"},"frontmatter":{"title":"장고 user 모델 커스텀하기"}},"next":null},"pageContext":{"id":"adf2fe42-fa29-5cff-8580-86fa86c161bf","previousPostId":"c395d58c-b611-5514-bcbc-461100a5e800","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}