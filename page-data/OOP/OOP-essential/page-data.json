{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/OOP/OOP-essential/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"c15da668-b7c0-590a-9d0c-6ff7cbedec21","excerpt":"0. 서론 장고를 공부하면서도 파이썬에 대해 너무 모르는게 많았다. 객체지향의 개념중 대충 감으로만 알고 넘기던 것들의 정의에 대해서 정리해봤다. 클래스(Class…","html":"<h2>0. 서론</h2>\n<p>장고를 공부하면서도 파이썬에 대해 너무 모르는게 많았다.<br>\n객체지향의 개념중 대충 감으로만 알고 넘기던 것들의 정의에 대해서 정리해봤다.</p>\n<h3>클래스(Class)</h3>\n<p>데이터와 기능을 함께 묶는 수단을 제공한다.<br>\n클래스를 생성하면 새로운 객체 유형이 생성되고 해당 유형의 인스턴스를 생성할 수 있다.</p>\n<h3>변수(Variables)</h3>\n<p>파이썬에서 변수는 객체에 대한 참조다.<br>\n변수를 객체를 저장하는것으로 생각하는 경향이 있으나 이는 잘못된 생각이다.<br>\n변수는 메모리의 다른 곳에 있는 객체에 대한 포인터(참조)로 생각해야 한다.</p>\n<h4>클래스 변수</h4>\n<p>클래스의 모든 인스턴스가 공유하는 변수이다.</p>\n<h4>인스턴스 변수</h4>\n<p>각 인스턴스가 다른 값을 가질 수 있다.</p>\n<h3>객체(Object)</h3>\n<p>객체는 속성의 집합에 이름을 달아놓은것이다.<br>\n각 속성은 다른 객체를 참조한다.<br>\n클래스를 정의하는것이 객체를 생성하는것이다.<br>\n<code class=\"language-text\">class MyObject</code> 구문이 <code class=\"language-text\">MyObject</code> 라는 이름의 객체를 생성하는것 처럼 보이지만 실제로는 <code class=\"language-text\">MyObject</code> 이라는 이름의 변수가 방금 생성된 객체를 참조하는것이다.<br>\n객체는 익명이지만 <code class=\"language-text\">__name__</code> 속성을 사용하면 객체에 이름을 지정할 수 있다.</p>\n<h3>속성(Attribute)</h3>\n<p>객체가 있으면 해당 객체의 속성에 액세스 할 수 있다.<br>\n객체는 특정 타입으로 선언하지 않고도 모듣 객체를 참조할 수 있다는 점에서 변수같이 작동한다고 할 수 있다.</p>\n<blockquote>\n<p>인스턴스화 하지 않아도 객체의 속성에 액세스 할 수 있다.</p>\n</blockquote>\n<h3>메서드</h3>\n<p>클래스에 포함되어 있는 함수라고 할 수 있다.</p>\n<h4>기본 메서드(인스턴스 메서드)</h4>\n<p>아무 데코레이터 없이 메서드를 선언했을 경우.<br>\n첫번째 매개변수(parameter) 로 클래스의 인스턴스(<code class=\"language-text\">self</code>)를 전달받는다</p>\n<h4>클래스 메서드</h4>\n<p><code class=\"language-text\">@classmethod</code> 데코레이터를 사용하여 선언했을 경우.<br>\n첫번째 매개변수로 클래스 자체(<code class=\"language-text\">cls</code>)를 전달받는다.<br>\n다른 클래스 속성이나 클래스 메서드에 접근 가능하다.<br>\n인스턴스에서도 실행 가능하지만 그렇게 하지 않는것을 권장한다.</p>\n<h4>스태틱 메서드</h4>\n<p>첫번째 매개변수가 자동으로 전달되지 않는다.<br>\n속성이나 메서드에 액세스 할 수 없다.<br>\n함수 그 자체의 기능을 하는 메서드라고 할 수 있다.<br>\n매개변수를 받아 단순히 연산하거나 값을 수정하여 리턴하는 방식으로 사용 가능.</p>\n<h3>self 에 대하여</h3>\n<p>메서드의 첫번째 인수로, 메서드가 호출된 인스턴스를 의미한다.<br>\n인스턴스의 메서드를 호출할 때 인스턴스 자신이 인자로 전달된다.<br>\n관례적으로 <code class=\"language-text\">self</code> 라고 사용한다.<br>\n이것을 통해 속성에 접근하거나 다른 메서드를 호출할 수 있다.</p>\n<h2>99. 끝나고 나서</h2>\n<p>잘 몰랐던 기본 개념에 대해서 정리했지만 틀린 부분도 있을것이고 더 알아야 하는 것도 한참 남았을 것이다.<br>\n앞으로는 새로운 개념에 대해 배우거나 정리할 때마다 이 문서를 조금씩 업데이트 할 예정이다.</p>\n<p>출처 :<br>\n<a href=\"https://docs.python.org/3/tutorial/classes.html\">클래스</a>\n<a href=\"https://www.i-programmer.info/programming/python/11683-programmers-python-variables-objects-and-attributes.html\">변수/객체/속성</a>\n<a href=\"https://youtu.be/BJ-VvGyQxho\">클래스변수/인스턴스변수</a>\n<a href=\"https://youtu.be/rq8cL2XMM5M\">클래스메서드/스태틱메서드</a></p>","frontmatter":{"title":"객체지향 개념 기초","date":"March 14, 2022","description":null}},"previous":{"fields":{"slug":"/django/request-to-internal-drf-api/"},"frontmatter":{"title":"프로젝트 내부의 API를 호출하면 안되는 이유"}},"next":null},"pageContext":{"id":"c15da668-b7c0-590a-9d0c-6ff7cbedec21","previousPostId":"fbaf20aa-2a58-566c-86e5-cd71f091f470","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}