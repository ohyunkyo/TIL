<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[Gatsby Starter Blog RSS Feed]]></description><link>https://ohyunkyo.github.io/TIL</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 16 Mar 2022 08:45:04 GMT</lastBuildDate><item><title><![CDATA[장고에서 drf 로 마이그레이션 시도]]></title><description><![CDATA[0. 서론 재고관리 프로젝트 코드 리팩토링 과정중 가장 먼저 drf 로 마이그레이션 하는것을 선택했다. 효율성을 위해 프론트와 백엔드를 구분하고 코드 재사용을 위한 선택이였다. 1. 시작하기 전 API 에서는 Json…]]></description><link>https://ohyunkyo.github.io/TIL/django-rest-framework/django-to-drf/</link><guid isPermaLink="false">https://ohyunkyo.github.io/TIL/django-rest-framework/django-to-drf/</guid><pubDate>Wed, 16 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;0. 서론&lt;/h2&gt;
&lt;p&gt;재고관리 프로젝트 코드 리팩토링 과정중 가장 먼저 drf 로 마이그레이션 하는것을 선택했다.&lt;br&gt;
효율성을 위해 프론트와 백엔드를 구분하고 코드 재사용을 위한 선택이였다.&lt;/p&gt;
&lt;h2&gt;1. 시작하기 전&lt;/h2&gt;
&lt;p&gt;API 에서는 Json 데이터를 리턴하고 프론트엔드 프레임워크에서 리턴받은 데이터를 보여주면 되겠다고 생각했다.&lt;br&gt;
당장 프론트엔드 프레임워크를 배우긴 힘들어서 방법에 대해 고민을 하던중 drf 공식문서에서 html 을 리턴하는것에도 적합하다는 내용을 보고 바로 시작했다.&lt;/p&gt;
&lt;h2&gt;2. 첫 시도&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;drf 공식 문서를 참고하여 데이터와 함께 &lt;code class=&quot;language-text&quot;&gt;business_list.html&lt;/code&gt; 을 리턴했다. 간단했지만 페이징이 불가능했다.&lt;/li&gt;
&lt;li&gt;페이징 방법을 찾다가 &lt;code class=&quot;language-text&quot;&gt;ViewSet&lt;/code&gt; 과 &lt;code class=&quot;language-text&quot;&gt;Serializer&lt;/code&gt; 를 알게되어 사용해보았지만 잘 되지 않았다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;routers&lt;/code&gt; 도 사용했는데 URL name 이 &lt;code class=&quot;language-text&quot;&gt;{basename}-list&lt;/code&gt; 형식으로 생성되지 않는것 같았다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;어느 하나 내가 원하는 대로 되지 않아서 커밋되지 않은 변경 사항을 모두 버리고 다시 생각해보기로 했다.&lt;br&gt;
그리고 프론트, 백엔드가 구분되어야 하기 때문에 drf 를 사용하지 않을수 없다는 결론을 내렸다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Serializer 에 대하여]]></title><description><![CDATA[역할 DRF 에서 데이터를 JSON 형태로 직렬화(Serialize) 한다. 데이터를 JSON 으로 바꿔준다고 생각하면 된다. 특징 Django 의 Form 과 같은 역할을 한다. Form 은 데이터를 HTML 형태로 변환 하지만 Serialize…]]></description><link>https://ohyunkyo.github.io/TIL/django-rest-framework/serializer/</link><guid isPermaLink="false">https://ohyunkyo.github.io/TIL/django-rest-framework/serializer/</guid><pubDate>Wed, 16 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;역할&lt;/h2&gt;
&lt;p&gt;DRF 에서 데이터를 JSON 형태로 직렬화(Serialize) 한다.&lt;br&gt;
데이터를 JSON 으로 바꿔준다고 생각하면 된다.&lt;/p&gt;
&lt;h2&gt;특징&lt;/h2&gt;
&lt;p&gt;Django 의 Form 과 같은 역할을 한다.&lt;br&gt;
Form 은 데이터를 HTML 형태로 변환 하지만 Serialize 는 JSON 문자열로 변환 해준다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[프로젝트 내부의 API를 호출하면 안되는 이유]]></title><description><![CDATA[0. 서론 월별 재고 확인을 위해 각 상품의 재고를 가져와 월별로 출력하는 기능이 필요했다. 이 월별 재고를 다른곳에서도 확인 가능할 수 있도록 drf 를 사용해 RESTful API 로 데이터를 제공하기로 결정했다. 1. REST API…]]></description><link>https://ohyunkyo.github.io/TIL/django/request-to-internal-drf-api/</link><guid isPermaLink="false">https://ohyunkyo.github.io/TIL/django/request-to-internal-drf-api/</guid><pubDate>Mon, 14 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;0. 서론&lt;/h2&gt;
&lt;p&gt;월별 재고 확인을 위해 각 상품의 재고를 가져와 월별로 출력하는 기능이 필요했다.&lt;br&gt;
이 월별 재고를 다른곳에서도 확인 가능할 수 있도록 drf 를 사용해 RESTful API 로 데이터를 제공하기로 결정했다.&lt;/p&gt;
&lt;h2&gt;1. REST API 제작&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;year/month/product_id&lt;/code&gt; 형태의 url 로 요청하면 해당 상품의 월별 최종 재고 데이터를 &lt;code class=&quot;language-text&quot;&gt;JsonResponse&lt;/code&gt; 로 반환 하도록 제작했다.&lt;/p&gt;
&lt;h2&gt;2. 월별 재고 페이지 제작&lt;/h2&gt;
&lt;p&gt;앞서 제작한 API 를 호출하여 특정연도에 상품의 월별 재고를 출력하는 페이지를 제작하려고 했다.&lt;br&gt;
이때 해당 API 의 endpoint 로 요청하여 데이터를 받는 방법과 API View 를 호출하는 방식을 생각했었는데 첫번째 방법은 문제가 있을것 같아서 두번째 방법으로 해결했다.&lt;/p&gt;
&lt;h2&gt;3. 어떤 문제가 있을까?&lt;/h2&gt;
&lt;p&gt;같은 앱에 있는 API endpoint 로 요청하는것은 좋은 예제라고 볼 수 없다고 한다. &lt;a href=&quot;https://stackoverflow.com/questions/60529072/django-correct-method-of-consuming-my-own-rest-api-internally-in-the-views-py&quot;&gt;(출처1)&lt;/a&gt;&lt;br&gt;
최대한 이런 방법을 피하고 해당 클래스에 직접 액세스해야 한다고 하는데 아마도 속도 문제인것 같다.  &lt;a href=&quot;https://www.reddit.com/r/django/comments/7sxiqn/internal_api_requests_does_it_make_sense_for_a/&quot;&gt;(출처2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;기본적으로 이 방법은 nginx 와 uwsgi 를 통해 새로운 HTTP 요청을 전달하기 때문에 더 많은 시간이 소요된다고 한다.&lt;br&gt;
더 많은 시간이 소요 된다는것은 더 많은 자원을 사용 한다는뜻이고, 서버와 어플리케이션 제공자에게 부담이 될 수밖에 없다.&lt;/p&gt;
&lt;h2&gt;99. 끝나고 나서&lt;/h2&gt;
&lt;p&gt;내가 원하던 형태로 작동한다. 그러나 이것이 정답인것 같지는 않다.&lt;br&gt;
&lt;a href=&quot;https://github.com/ohyunkyo/inventory-manage/commit/f2b6c40806074f10650c0e6e64b4b806bc538b91#r68620070&quot;&gt;지금 사용한 방법&lt;/a&gt; 보다 더 좋은 방법이 있을것같다는 생각이 든다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/g/django-rest-framework/c/26tIiJB7vQw&quot;&gt;drf 구글 그룹&lt;/a&gt; 에서는 믹스인 사용을 권장한다.&lt;br&gt;
기능 개발이 모두 끝나면 코드 리팩토링할 예정인데, 믹스인에 대해 알아보고 필요한 부분에 적용해야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[객체지향 개념 기초]]></title><description><![CDATA[0. 서론 장고를 공부하면서도 파이썬에 대해 너무 모르는게 많았다. 객체지향의 개념중 대충 감으로만 알고 넘기던 것들의 정의에 대해서 정리해봤다. 클래스(Class…]]></description><link>https://ohyunkyo.github.io/TIL/OOP/OOP-essential/</link><guid isPermaLink="false">https://ohyunkyo.github.io/TIL/OOP/OOP-essential/</guid><pubDate>Mon, 14 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;0. 서론&lt;/h2&gt;
&lt;p&gt;장고를 공부하면서도 파이썬에 대해 너무 모르는게 많았다.&lt;br&gt;
객체지향의 개념중 대충 감으로만 알고 넘기던 것들의 정의에 대해서 정리해봤다.&lt;/p&gt;
&lt;h3&gt;클래스(Class)&lt;/h3&gt;
&lt;p&gt;데이터와 기능을 함께 묶는 수단을 제공한다.&lt;br&gt;
클래스를 생성하면 새로운 객체 유형이 생성되고 해당 유형의 인스턴스를 생성할 수 있다.&lt;/p&gt;
&lt;h3&gt;변수(Variables)&lt;/h3&gt;
&lt;p&gt;파이썬에서 변수는 객체에 대한 참조다.&lt;br&gt;
변수를 객체를 저장하는것으로 생각하는 경향이 있으나 이는 잘못된 생각이다.&lt;br&gt;
변수는 메모리의 다른 곳에 있는 객체에 대한 포인터(참조)로 생각해야 한다.&lt;/p&gt;
&lt;h4&gt;클래스 변수&lt;/h4&gt;
&lt;p&gt;클래스의 모든 인스턴스가 공유하는 변수이다.&lt;/p&gt;
&lt;h4&gt;인스턴스 변수&lt;/h4&gt;
&lt;p&gt;각 인스턴스가 다른 값을 가질 수 있다.&lt;/p&gt;
&lt;h3&gt;객체(Object)&lt;/h3&gt;
&lt;p&gt;객체는 속성의 집합에 이름을 달아놓은것이다.&lt;br&gt;
각 속성은 다른 객체를 참조한다.&lt;br&gt;
클래스를 정의하는것이 객체를 생성하는것이다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;class MyObject&lt;/code&gt; 구문이 &lt;code class=&quot;language-text&quot;&gt;MyObject&lt;/code&gt; 라는 이름의 객체를 생성하는것 처럼 보이지만 실제로는 &lt;code class=&quot;language-text&quot;&gt;MyObject&lt;/code&gt; 이라는 이름의 변수가 방금 생성된 객체를 참조하는것이다.&lt;br&gt;
객체는 익명이지만 &lt;code class=&quot;language-text&quot;&gt;__name__&lt;/code&gt; 속성을 사용하면 객체에 이름을 지정할 수 있다.&lt;/p&gt;
&lt;h3&gt;속성(Attribute)&lt;/h3&gt;
&lt;p&gt;객체가 있으면 해당 객체의 속성에 액세스 할 수 있다.&lt;br&gt;
객체는 특정 타입으로 선언하지 않고도 모듣 객체를 참조할 수 있다는 점에서 변수같이 작동한다고 할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인스턴스화 하지 않아도 객체의 속성에 액세스 할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;메서드&lt;/h3&gt;
&lt;p&gt;클래스에 포함되어 있는 함수라고 할 수 있다.&lt;/p&gt;
&lt;h4&gt;기본 메서드(인스턴스 메서드)&lt;/h4&gt;
&lt;p&gt;아무 데코레이터 없이 메서드를 선언했을 경우.&lt;br&gt;
첫번째 매개변수(parameter) 로 클래스의 인스턴스(&lt;code class=&quot;language-text&quot;&gt;self&lt;/code&gt;)를 전달받는다&lt;/p&gt;
&lt;h4&gt;클래스 메서드&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@classmethod&lt;/code&gt; 데코레이터를 사용하여 선언했을 경우.&lt;br&gt;
첫번째 매개변수로 클래스 자체(&lt;code class=&quot;language-text&quot;&gt;cls&lt;/code&gt;)를 전달받는다.&lt;br&gt;
다른 클래스 속성이나 클래스 메서드에 접근 가능하다.&lt;br&gt;
인스턴스에서도 실행 가능하지만 그렇게 하지 않는것을 권장한다.&lt;/p&gt;
&lt;h4&gt;스태틱 메서드&lt;/h4&gt;
&lt;p&gt;첫번째 매개변수가 자동으로 전달되지 않는다.&lt;br&gt;
속성이나 메서드에 액세스 할 수 없다.&lt;br&gt;
함수 그 자체의 기능을 하는 메서드라고 할 수 있다.&lt;br&gt;
매개변수를 받아 단순히 연산하거나 값을 수정하여 리턴하는 방식으로 사용 가능.&lt;/p&gt;
&lt;h3&gt;self 에 대하여&lt;/h3&gt;
&lt;p&gt;메서드의 첫번째 인수로, 메서드가 호출된 인스턴스를 의미한다.&lt;br&gt;
인스턴스의 메서드를 호출할 때 인스턴스 자신이 인자로 전달된다.&lt;br&gt;
관례적으로 &lt;code class=&quot;language-text&quot;&gt;self&lt;/code&gt; 라고 사용한다.&lt;br&gt;
이것을 통해 속성에 접근하거나 다른 메서드를 호출할 수 있다.&lt;/p&gt;
&lt;h2&gt;99. 끝나고 나서&lt;/h2&gt;
&lt;p&gt;잘 몰랐던 기본 개념에 대해서 정리했지만 틀린 부분도 있을것이고 더 알아야 하는 것도 한참 남았을 것이다.&lt;br&gt;
앞으로는 새로운 개념에 대해 배우거나 정리할 때마다 이 문서를 조금씩 업데이트 할 예정이다.&lt;/p&gt;
&lt;p&gt;출처 :&lt;br&gt;
&lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html&quot;&gt;클래스&lt;/a&gt;
&lt;a href=&quot;https://www.i-programmer.info/programming/python/11683-programmers-python-variables-objects-and-attributes.html&quot;&gt;변수/객체/속성&lt;/a&gt;
&lt;a href=&quot;https://youtu.be/BJ-VvGyQxho&quot;&gt;클래스변수/인스턴스변수&lt;/a&gt;
&lt;a href=&quot;https://youtu.be/rq8cL2XMM5M&quot;&gt;클래스메서드/스태틱메서드&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>